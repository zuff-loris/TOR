<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\tokenring_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\tokenring_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue May 02 11:43:46 2023
<BR><P>
<H3>Maximum Stack Usage =        576 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ChatSender &rArr; Ext_Keyboard_Init &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[16b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[135]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[135]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
 <LI><a href="#[10c]">WM_Move</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10b]">WM_Size</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[fd]">AfterClear</a> from gwin_console.o(i.AfterClear) referenced from gwin_console.o(.constdata)
 <LI><a href="#[14]">BusFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f9]">ButtonMouseDown</a> from gwin_button.o(i.ButtonMouseDown) referenced from gwin_button.o(.constdata)
 <LI><a href="#[fa]">ButtonMouseUp</a> from gwin_button.o(i.ButtonMouseUp) referenced from gwin_button.o(.constdata)
 <LI><a href="#[2e]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[77]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[98]">ChatReceiver</a> from chat_receiver.o(i.ChatReceiver) referenced from main.o(i.main)
 <LI><a href="#[99]">ChatSender</a> from chat_sender.o(i.ChatSender) referenced from main.o(i.main)
 <LI><a href="#[fc]">CheckboxMouseDown</a> from gwin_checkbox.o(i.CheckboxMouseDown) referenced from gwin_checkbox.o(.constdata)
 <LI><a href="#[100]">ContainerBorderSize</a> from gwin_container.o(i.ContainerBorderSize) referenced 4 times from gwin_container.o(.constdata)
 <LI><a href="#[68]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[73]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream4_IRQHandler</a> from sai_stm32f7xx.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream7_IRQHandler</a> from sai_stm32f7xx.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[91]">DebugStation</a> from debug.o(i.DebugStation) referenced from main.o(i.main)
 <LI><a href="#[57]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from ext_keyboard.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[90]">GTimerThreadHandler</a> from gtimer.o(i.GTimerThreadHandler) referenced from gtimer.o(i.gtimerStart)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[ce]">I2C3_Control</a> from i2c_stm32f7xx.o(i.I2C3_Control) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[63]">I2C3_ER_IRQHandler</a> from i2c_stm32f7xx.o(i.I2C3_ER_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">I2C3_EV_IRQHandler</a> from i2c_stm32f7xx.o(i.I2C3_EV_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[cd]">I2C3_GetDataCount</a> from i2c_stm32f7xx.o(i.I2C3_GetDataCount) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[cf]">I2C3_GetStatus</a> from i2c_stm32f7xx.o(i.I2C3_GetStatus) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[c6]">I2C3_Initialize</a> from i2c_stm32f7xx.o(i.I2C3_Initialize) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[ca]">I2C3_MasterReceive</a> from i2c_stm32f7xx.o(i.I2C3_MasterReceive) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[c9]">I2C3_MasterTransmit</a> from i2c_stm32f7xx.o(i.I2C3_MasterTransmit) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[c8]">I2C3_PowerControl</a> from i2c_stm32f7xx.o(i.I2C3_PowerControl) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[cc]">I2C3_SlaveReceive</a> from i2c_stm32f7xx.o(i.I2C3_SlaveReceive) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[cb]">I2C3_SlaveTransmit</a> from i2c_stm32f7xx.o(i.I2C3_SlaveTransmit) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[c7]">I2C3_Uninitialize</a> from i2c_stm32f7xx.o(i.I2C3_Uninitialize) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[79]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[78]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[c5]">I2CX_GetCapabilities</a> from i2c_stm32f7xx.o(i.I2CX_GetCapabilities) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[c4]">I2CX_GetVersion</a> from i2c_stm32f7xx.o(i.I2CX_GetVersion) referenced from i2c_stm32f7xx.o(.constdata)
 <LI><a href="#[101]">ImageDestroy</a> from gwin_image.o(i.ImageDestroy) referenced from gwin_image.o(.constdata)
 <LI><a href="#[102]">ImageRedraw</a> from gwin_image.o(i.ImageRedraw) referenced from gwin_image.o(.constdata)
 <LI><a href="#[9b]">LCD</a> from lcd.o(i.LCD) referenced from main.o(i.main)
 <LI><a href="#[76]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[72]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[71]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[94]">MacReceiver</a> from mac_receiver.o(i.MacReceiver) referenced from main.o(i.main)
 <LI><a href="#[95]">MacSender</a> from mac_sender.o(i.MacSender) referenced from main.o(i.main)
 <LI><a href="#[13]">MemManage_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[86]">MousePoll</a> from ginput_mouse.o(i.MousePoll) referenced from ginput_mouse.o(i._gmouseInitDriver)
 <LI><a href="#[11]">NMI_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[92]">PhReceiver</a> from phy_receiver.o(i.PhReceiver) referenced from main.o(i.main)
 <LI><a href="#[93]">PhSender</a> from phy_sender.o(i.PhSender) referenced from main.o(i.main)
 <LI><a href="#[75]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f1]">ROMClose</a> from gfile_fs_rom.o(i.ROMClose) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[f5]">ROMEof</a> from gfile_fs_rom.o(i.ROMEof) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[ee]">ROMExists</a> from gfile_fs_rom.o(i.ROMExists) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[ef]">ROMFilesize</a> from gfile_fs_rom.o(i.ROMFilesize) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[f4]">ROMGetsize</a> from gfile_fs_rom.o(i.ROMGetsize) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[f0]">ROMOpen</a> from gfile_fs_rom.o(i.ROMOpen) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[f2]">ROMRead</a> from gfile_fs_rom.o(i.ROMRead) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[f3]">ROMSetpos</a> from gfile_fs_rom.o(i.ROMSetpos) referenced from gfile_fs_rom.o(.constdata)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[105]">RadioMouseDown</a> from gwin_radio.o(i.RadioMouseDown) referenced from gwin_radio.o(.constdata)
 <LI><a href="#[88]">RedrawTimerFn</a> from gwin_wm.o(i.RedrawTimerFn) referenced from gwin_wm.o(i._gwmInit)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[70]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d0]">SAI2_A_DMA_Complete</a> from sai_stm32f7xx.o(i.SAI2_A_DMA_Complete) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d1]">SAI2_B_DMA_Complete</a> from sai_stm32f7xx.o(i.SAI2_B_DMA_Complete) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[db]">SAI2_Control</a> from sai_stm32f7xx.o(i.SAI2_Control) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d3]">SAI2_GetCapabilities</a> from sai_stm32f7xx.o(i.SAI2_GetCapabilities) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[da]">SAI2_GetRxCount</a> from sai_stm32f7xx.o(i.SAI2_GetRxCount) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[dc]">SAI2_GetStatus</a> from sai_stm32f7xx.o(i.SAI2_GetStatus) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d9]">SAI2_GetTxCount</a> from sai_stm32f7xx.o(i.SAI2_GetTxCount) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[74]">SAI2_IRQHandler</a> from sai_stm32f7xx.o(i.SAI2_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d4]">SAI2_Initialize</a> from sai_stm32f7xx.o(i.SAI2_Initialize) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d6]">SAI2_PowerControl</a> from sai_stm32f7xx.o(i.SAI2_PowerControl) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d8]">SAI2_Receive</a> from sai_stm32f7xx.o(i.SAI2_Receive) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d7]">SAI2_Send</a> from sai_stm32f7xx.o(i.SAI2_Send) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d5]">SAI2_Uninitialize</a> from sai_stm32f7xx.o(i.SAI2_Uninitialize) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[d2]">SAI_GetVersion</a> from sai_stm32f7xx.o(i.SAI_GetVersion) referenced from sai_stm32f7xx.o(.constdata)
 <LI><a href="#[4b]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7a]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6f]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[7b]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[1c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[96]">TimeReceiver</a> from time_receiver.o(i.TimeReceiver) referenced from main.o(i.main)
 <LI><a href="#[97]">TimeSender</a> from time_sender.o(i.TimeSender) referenced from main.o(i.main)
 <LI><a href="#[9a]">Touch</a> from touch.o(i.Touch) referenced from main.o(i.main)
 <LI><a href="#[4e]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[80]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[81]">UART_RxISR_16BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[82]">UART_RxISR_8BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">USART6_IRQHandler</a> from ext_uart.o(i.USART6_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[108]">WM_Add</a> from gwin_wm.o(i.WM_Add) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[107]">WM_DeInit</a> from gwin_wm.o(i.WM_DeInit) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[109]">WM_Delete</a> from gwin_wm.o(i.WM_Delete) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[106]">WM_Init</a> from gwin_wm.o(i.WM_Init) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[10e]">WM_MinMax</a> from gwin_wm.o(i.WM_MinMax) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[10c]">WM_Move</a> from gwin_wm.o(i.WM_Move) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[10d]">WM_Raise</a> from gwin_wm.o(i.WM_Raise) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[10a]">WM_Redraw</a> from gwin_wm.o(i.WM_Redraw) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[10b]">WM_Size</a> from gwin_wm.o(i.WM_Size) referenced from gwin_wm.o(.constdata)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[111]">__main</a> from __main.o(!!!main) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[7f]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[fe]">_gcontainerDestroy</a> from gwin_container.o(i._gcontainerDestroy) referenced from gwin_container.o(.constdata)
 <LI><a href="#[df]">_gdispDeInitDriver</a> from gdisp.o(i._gdispDeInitDriver) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[dd]">_gdispInitDriver</a> from gdisp.o(i._gdispInitDriver) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[de]">_gdispPostInitDriver</a> from gdisp.o(i._gdispPostInitDriver) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[e7]">_gmouseDeInitDriver</a> from ginput_mouse.o(i._gmouseDeInitDriver) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[e5]">_gmouseInitDriver</a> from ginput_mouse.o(i._gmouseInitDriver) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[e6]">_gmousePostInitDriver</a> from ginput_mouse.o(i._gmousePostInitDriver) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[83]">_gwidgetCreate</a> from gwin_widget.o(i._gwidgetCreate) referenced from gwin_checkbox.o(i.SendCheckboxEvent)
 <LI><a href="#[83]">_gwidgetCreate</a> from gwin_widget.o(i._gwidgetCreate) referenced from gwin_radio.o(i.SendRadioEvent)
 <LI><a href="#[83]">_gwidgetCreate</a> from gwin_widget.o(i._gwidgetCreate) referenced from gwin_widget.o(i._gwinSendEvent)
 <LI><a href="#[83]">_gwidgetCreate</a> from gwin_widget.o(i._gwidgetCreate) referenced from gwin_widget.o(i.gwinAttachListener)
 <LI><a href="#[f6]">_gwidgetDestroy</a> from gwin_widget.o(i._gwidgetDestroy) referenced 4 times from gwin_button.o(.constdata)
 <LI><a href="#[f7]">_gwidgetRedraw</a> from gwin_widget.o(i._gwidgetRedraw) referenced 5 times from gwin_button.o(.constdata)
 <LI><a href="#[7e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7d]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[85]">background_Display_Background</a> from gui.o(i.background_Display_Background) referenced from gui.o(i._createPagestartup)
 <LI><a href="#[84]">background_gray</a> from gui.o(i.background_gray) referenced from gui.o(i._createPageaddressSelectDisplay)
 <LI><a href="#[84]">background_gray</a> from gui.o(i.background_gray) referenced from gui.o(i._createPageconfigDisplay)
 <LI><a href="#[84]">background_gray</a> from gui.o(i.background_gray) referenced from gui.o(i._createPagemainDisplay)
 <LI><a href="#[8d]">drawcharglyph</a> from gdisp.o(i.drawcharglyph) referenced from gdisp.o(i.gdispGDrawStringBox)
 <LI><a href="#[8d]">drawcharglyph</a> from gdisp.o(i.drawcharglyph) referenced from gdisp.o(i.mf_drawline_callback)
 <LI><a href="#[89]">drawcharline</a> from gdisp.o(i.drawcharline) referenced from gdisp.o(i.drawcharglyph)
 <LI><a href="#[89]">drawcharline</a> from gdisp.o(i.drawcharline) referenced from gdisp.o(i.gdispGDrawChar)
 <LI><a href="#[8f]">fillcharglyph</a> from gdisp.o(i.fillcharglyph) referenced from gdisp.o(i.gdispGFillStringBox)
 <LI><a href="#[8f]">fillcharglyph</a> from gdisp.o(i.fillcharglyph) referenced from gdisp.o(i.mf_fillline_callback)
 <LI><a href="#[8a]">fillcharline</a> from gdisp.o(i.fillcharline) referenced from gdisp.o(i.fillcharglyph)
 <LI><a href="#[9d]">fit_leftedge</a> from mf_kerning.o(i.fit_leftedge) referenced from mf_kerning.o(i.mf_compute_kerning)
 <LI><a href="#[9c]">fit_rightedge</a> from mf_kerning.o(i.fit_rightedge) referenced from mf_kerning.o(i.mf_compute_kerning)
 <LI><a href="#[e8]">ft5336Init</a> from gmouse_lld_ft5336.o(i.ft5336Init) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[e9]">ft5336ReadXYZ</a> from gmouse_lld_ft5336.o(i.ft5336ReadXYZ) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[b]">gdispGImageDraw_BMP</a> from gdisp_image_bmp.o(i.gdispGImageDraw_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[f]">gdispImageAdjustPalette_BMP</a> from gdisp_image_bmp.o(i.gdispImageAdjustPalette_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[a]">gdispImageCache_BMP</a> from gdisp_image_bmp.o(i.gdispImageCache_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[9]">gdispImageClose_BMP</a> from gdisp_image_bmp.o(i.gdispImageClose_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[d]">gdispImageGetPaletteSize_BMP</a> from gdisp_image_bmp.o(i.gdispImageGetPaletteSize_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[e]">gdispImageGetPalette_BMP</a> from gdisp_image_bmp.o(i.gdispImageGetPalette_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[c]">gdispImageNext_BMP</a> from gdisp_image_bmp.o(i.gdispImageNext_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[8]">gdispImageOpen_BMP</a> from gdisp_image_bmp.o(i.gdispImageOpen_BMP) referenced 2 times from gdisp_image.o(.data)
 <LI><a href="#[e4]">gdisp_lld_control</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_control) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[e1]">gdisp_lld_draw_pixel</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_draw_pixel) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[e2]">gdisp_lld_fill_area</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_fill_area) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[e3]">gdisp_lld_get_pixel_color</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_get_pixel_color) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[e0]">gdisp_lld_init</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_init) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[87]">gwidgetEvent</a> from gwin_widget.o(i.gwidgetEvent) referenced from gwin_widget.o(i._gwidgetInit)
 <LI><a href="#[f8]">gwinButtonDraw_Normal</a> from gwin_button.o(i.gwinButtonDraw_Normal) referenced from gwin_button.o(.constdata)
 <LI><a href="#[fb]">gwinCheckboxDraw_CheckOnLeft</a> from gwin_checkbox.o(i.gwinCheckboxDraw_CheckOnLeft) referenced from gwin_checkbox.o(.constdata)
 <LI><a href="#[ff]">gwinContainerDraw_Std</a> from gwin_container.o(i.gwinContainerDraw_Std) referenced from gwin_container.o(.constdata)
 <LI><a href="#[103]">gwinLabelDrawJustifiedLeft</a> from gwin_label.o(i.gwinLabelDrawJustifiedLeft) referenced from gwin_label.o(.constdata)
 <LI><a href="#[104]">gwinRadioDraw_Radio</a> from gwin_radio.o(i.gwinRadioDraw_Radio) referenced from gwin_radio.o(.constdata)
 <LI><a href="#[8b]">mf_countline_callback</a> from gdisp.o(i.mf_countline_callback) referenced from gdisp.o(i.gdispGDrawStringBox)
 <LI><a href="#[8b]">mf_countline_callback</a> from gdisp.o(i.mf_countline_callback) referenced from gdisp.o(i.gdispGFillStringBox)
 <LI><a href="#[8c]">mf_drawline_callback</a> from gdisp.o(i.mf_drawline_callback) referenced from gdisp.o(i.gdispGDrawStringBox)
 <LI><a href="#[8e]">mf_fillline_callback</a> from gdisp.o(i.mf_fillline_callback) referenced from gdisp.o(i.gdispGFillStringBox)
 <LI><a href="#[ea]">mf_rlefont_character_width</a> from mf_rlefont.o(i.mf_rlefont_character_width) referenced 5 times from mf_font.o(.constdata)
 <LI><a href="#[eb]">mf_rlefont_render_character</a> from mf_rlefont.o(i.mf_rlefont_render_character) referenced 5 times from mf_font.o(.constdata)
 <LI><a href="#[ec]">mf_scaled_character_width</a> from mf_scaledfont.o(i.mf_scaled_character_width) referenced 2 times from mf_font.o(.constdata)
 <LI><a href="#[ed]">mf_scaled_render_character</a> from mf_scaledfont.o(i.mf_scaled_render_character) referenced 2 times from mf_font.o(.constdata)
 <LI><a href="#[be]">osRtxEventFlagsPostProcess</a> from rtx_evflags.o(i.osRtxEventFlagsPostProcess) referenced from rtx_evflags.o(i.svcRtxEventFlagsNew)
 <LI><a href="#[b5]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[bf]">osRtxMemoryPoolPostProcess</a> from rtx_mempool.o(i.osRtxMemoryPoolPostProcess) referenced from rtx_mempool.o(i.svcRtxMemoryPoolNew)
 <LI><a href="#[c0]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[c1]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[c3]">osRtxThreadPostProcess</a> from rtx_thread.o(i.osRtxThreadPostProcess) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[110]">osRtxTimerSetup</a> from rtx_timer.o(i.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[10f]">osRtxTimerThread</a> from rtx_timer.o(i.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[b6]">osRtxTimerTick</a> from rtx_timer.o(i.osRtxTimerTick) referenced from rtx_timer.o(i.osRtxTimerSetup)
 <LI><a href="#[c2]">osThreadExit</a> from rtx_thread.o(i.osThreadExit) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[9e]">scaled_pixel_callback</a> from mf_scaledfont.o(i.scaled_pixel_callback) referenced from mf_scaledfont.o(i.mf_scaled_render_character)
 <LI><a href="#[9f]">svcRtxDelay</a> from rtx_delay.o(i.svcRtxDelay) referenced from rtx_delay.o(i.osDelay)
 <LI><a href="#[a0]">svcRtxEventFlagsClear</a> from rtx_evflags.o(i.svcRtxEventFlagsClear) referenced from rtx_evflags.o(i.osEventFlagsClear)
 <LI><a href="#[a1]">svcRtxEventFlagsNew</a> from rtx_evflags.o(i.svcRtxEventFlagsNew) referenced from rtx_evflags.o(i.osEventFlagsNew)
 <LI><a href="#[a2]">svcRtxEventFlagsSet</a> from rtx_evflags.o(i.svcRtxEventFlagsSet) referenced from rtx_evflags.o(i.osEventFlagsSet)
 <LI><a href="#[a3]">svcRtxEventFlagsWait</a> from rtx_evflags.o(i.svcRtxEventFlagsWait) referenced from rtx_evflags.o(i.osEventFlagsWait)
 <LI><a href="#[a4]">svcRtxKernelGetState</a> from rtx_kernel.o(i.svcRtxKernelGetState) referenced from rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[a5]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(i.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(i.osKernelGetTickCount)
 <LI><a href="#[a6]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(i.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(i.osKernelGetTickFreq)
 <LI><a href="#[a7]">svcRtxKernelInitialize</a> from rtx_kernel.o(i.svcRtxKernelInitialize) referenced from rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[a8]">svcRtxKernelLock</a> from rtx_kernel.o(i.svcRtxKernelLock) referenced from rtx_kernel.o(i.osKernelLock)
 <LI><a href="#[a9]">svcRtxKernelStart</a> from rtx_kernel.o(i.svcRtxKernelStart) referenced from rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[aa]">svcRtxKernelUnlock</a> from rtx_kernel.o(i.svcRtxKernelUnlock) referenced from rtx_kernel.o(i.osKernelUnlock)
 <LI><a href="#[ab]">svcRtxMemoryPoolAlloc</a> from rtx_mempool.o(i.svcRtxMemoryPoolAlloc) referenced from rtx_mempool.o(i.osMemoryPoolAlloc)
 <LI><a href="#[ac]">svcRtxMemoryPoolFree</a> from rtx_mempool.o(i.svcRtxMemoryPoolFree) referenced from rtx_mempool.o(i.osMemoryPoolFree)
 <LI><a href="#[ad]">svcRtxMemoryPoolNew</a> from rtx_mempool.o(i.svcRtxMemoryPoolNew) referenced from rtx_mempool.o(i.osMemoryPoolNew)
 <LI><a href="#[ae]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[af]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[b0]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[b1]">svcRtxMutexAcquire</a> from rtx_mutex.o(i.svcRtxMutexAcquire) referenced from rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[b2]">svcRtxMutexDelete</a> from rtx_mutex.o(i.svcRtxMutexDelete) referenced from rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[b3]">svcRtxMutexNew</a> from rtx_mutex.o(i.svcRtxMutexNew) referenced from rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[b4]">svcRtxMutexRelease</a> from rtx_mutex.o(i.svcRtxMutexRelease) referenced from rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[b7]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(i.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(i.osSemaphoreAcquire)
 <LI><a href="#[b8]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[b9]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[ba]">svcRtxThreadExit</a> from rtx_thread.o(i.svcRtxThreadExit) referenced from rtx_thread.o(i.osThreadExit)
 <LI><a href="#[bb]">svcRtxThreadGetId</a> from rtx_thread.o(i.svcRtxThreadGetId) referenced from rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[bc]">svcRtxThreadNew</a> from rtx_thread.o(i.svcRtxThreadNew) referenced from rtx_thread.o(i.osThreadNew)
 <LI><a href="#[bd]">svcRtxThreadYield</a> from rtx_thread.o(i.svcRtxThreadYield) referenced from rtx_thread.o(i.osThreadYield)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[111]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[116]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[118]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[39d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[39e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[39f]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3a0]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3a1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[119]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[11b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[3a2]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[12c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[11f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3a3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3a4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3a5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3a6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3a7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3a8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3a9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3aa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3ab]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3ac]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3ad]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3ae]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3af]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[121]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3b1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3b2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3b3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3b4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3b5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3b6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3b7]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3b8]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3b9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[3ba]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3bb]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3bc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[3be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[117]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3bf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[127]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3c0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[176]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[130]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3c1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[132]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3c2]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsSet
</UL>

<P><STRONG><a name="[1a0]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsClear
</UL>

<P><STRONG><a name="[19d]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[19e]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>

<P><STRONG><a name="[3c3]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c4]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c5]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c6]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c7]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c8]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c9]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)

<P><STRONG><a name="[134]"></a>__asm___13_rtx_evflags_c_e167c757__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_evflags.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_link_put
</UL>

<P><STRONG><a name="[3ca]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3cb]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3cc]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3cd]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ce]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[367]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[3cf]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d0]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[368]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[3d1]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d2]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[366]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[135]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[267]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[3d3]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d4]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d5]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d6]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[269]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[3d7]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d8]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d9]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[266]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[3da]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[3db]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[136]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_put
</UL>

<P><STRONG><a name="[3dc]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3de]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3df]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e0]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e1]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[284]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[3e2]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e3]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e4]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[282]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[3e5]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[137]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>

<P><STRONG><a name="[3e6]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e7]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e8]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ea]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[3eb]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[33f]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[33d]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[3ec]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ed]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[33c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[3ee]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[138]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[3ef]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f0]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f1]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[28b]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[28c]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[3f2]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f3]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f4]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f5]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f6]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f7]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f8]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[139]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[20c]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[1ac]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1a5]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1a6]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_wr32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1ad]"></a>__asm___15_EventRecorder_c_e8d3082c__LockRecord</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[1ae]"></a>__asm___15_EventRecorder_c_e8d3082c__UnlockRecord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f9]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[3fa]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
</UL>

<P><STRONG><a name="[13e]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[141]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[142]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[140]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[11a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[144]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[147]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = putc &rArr; fputc &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMacFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugFrame
</UL>

<P><STRONG><a name="[332]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
</UL>

<P><STRONG><a name="[18f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
</UL>

<P><STRONG><a name="[262]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacReceiver
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMRead
</UL>

<P><STRONG><a name="[149]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3fb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
</UL>

<P><STRONG><a name="[14b]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3ff]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_PowerControl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Initialize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[400]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[26c]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>

<P><STRONG><a name="[14d]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
</UL>

<P><STRONG><a name="[14f]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
</UL>

<P><STRONG><a name="[402]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[152]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[11c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[148]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fputc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fputc &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[122]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[124]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[14e]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[403]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[158]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[15b]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2eb]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[404]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[405]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[154]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[167]"></a>_fopen$locked</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[155]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[128]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[15a]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[406]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[16e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[120]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[171]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[160]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[13d]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[166]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _fseek &rArr; _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[408]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[161]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[162]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[15c]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[12f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[169]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[168]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[133]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[409]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[170]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[173]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[40a]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[16f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[179]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[40b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[40d]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[17a]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[17c]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[11e]"></a>_fp_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i.$Sub$$_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[17e]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, stm32f746g_discovery_sdram.o(i.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BSP_SDRAM_Init &rArr; BSP_SDRAM_Initialization_sequence &rArr; _HAL_SDRAM_SendCommand &rArr; _FMC_SDRAM_SendCommand &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[98]"></a>ChatReceiver</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, chat_receiver.o(i.ChatReceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ChatReceiver &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[99]"></a>ChatSender</STRONG> (Thumb, 294 bytes, Stack size 272 bytes, chat_sender.o(i.ChatSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ChatSender &rArr; Ext_Keyboard_Init &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[18b]"></a>CheckRetCode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.CheckRetCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeReceiver
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhSender
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacReceiver
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatReceiver
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[56]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.DMA2_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>DebugFrame</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, main.o(i.DebugFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DebugFrame &rArr; putc &rArr; fputc &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
</UL>

<P><STRONG><a name="[195]"></a>DebugMacFrame</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, main.o(i.DebugMacFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DebugMacFrame &rArr; putc &rArr; fputc &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhSender
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
</UL>

<P><STRONG><a name="[91]"></a>DebugStation</STRONG> (Thumb, 828 bytes, Stack size 40 bytes, debug.o(i.DebugStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = DebugStation &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_PWM
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMacFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ext_keyboard.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanCodeAnalyse
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>EventRecord2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eventrecorder.o(i.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClearDone
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadYield
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFreeFailed
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFree
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDeallocated
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolCreated
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocPending
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocFailed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAlloc
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlocked
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLocked
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>

<P><STRONG><a name="[1aa]"></a>EventRecord4</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitPending
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWait
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolNew
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>

<P><STRONG><a name="[340]"></a>EventRecorderDisable</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, eventrecorder.o(i.EventRecorderDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>EventRecorderEnable</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, eventrecorder.o(i.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1af]"></a>EventRecorderInitialize</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>EventRecorderStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eventrecorder.o(i.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1b2]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1b1]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1b5]"></a>EvrRtxDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelay &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1b6]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelayCompleted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1b7]"></a>EvrRtxDelayError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[1b8]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxDelayStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[1b9]"></a>EvrRtxEventFlagsClear</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsClear &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[1ba]"></a>EvrRtxEventFlagsClearDone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxEventFlagsClearDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsClearDone &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>

<P><STRONG><a name="[1bb]"></a>EvrRtxEventFlagsCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxEventFlagsCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[1bc]"></a>EvrRtxEventFlagsError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxEventFlagsError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[1bd]"></a>EvrRtxEventFlagsNew</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxEventFlagsNew &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[1be]"></a>EvrRtxEventFlagsSet</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsSet &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[1bf]"></a>EvrRtxEventFlagsSetDone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxEventFlagsSetDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsSetDone &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
</UL>

<P><STRONG><a name="[1c0]"></a>EvrRtxEventFlagsWait</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxEventFlagsWait &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[1c1]"></a>EvrRtxEventFlagsWaitCompleted</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxEventFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[1c2]"></a>EvrRtxEventFlagsWaitNotCompleted</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitNotCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxEventFlagsWaitNotCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[1c3]"></a>EvrRtxEventFlagsWaitPending</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxEventFlagsWaitPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
</UL>

<P><STRONG><a name="[1c4]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
</UL>

<P><STRONG><a name="[1c5]"></a>EvrRtxKernelError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelUnlock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelLock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[1c6]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[1c7]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[1c8]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[1c9]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[1ca]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1cb]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1cc]"></a>EvrRtxKernelLock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[1cd]"></a>EvrRtxKernelLocked</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelLocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelLock
</UL>

<P><STRONG><a name="[1ce]"></a>EvrRtxKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1cf]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d0]"></a>EvrRtxKernelUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelUnlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
</UL>

<P><STRONG><a name="[1d1]"></a>EvrRtxKernelUnlocked</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxKernelUnlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxKernelUnlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelUnlock
</UL>

<P><STRONG><a name="[1d2]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[1d3]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1d4]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[1d5]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[1d6]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[1d7]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[1d8]"></a>EvrRtxMemoryPoolAlloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1d9]"></a>EvrRtxMemoryPoolAllocFailed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMemoryPoolAllocFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1da]"></a>EvrRtxMemoryPoolAllocPending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolAllocPending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1db]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1dc]"></a>EvrRtxMemoryPoolAllocated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolAllocated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>

<P><STRONG><a name="[1dd]"></a>EvrRtxMemoryPoolCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
</UL>

<P><STRONG><a name="[1de]"></a>EvrRtxMemoryPoolDeallocated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolDeallocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolDeallocated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[1df]"></a>EvrRtxMemoryPoolError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
</UL>

<P><STRONG><a name="[1e0]"></a>EvrRtxMemoryPoolFree</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolFree &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>

<P><STRONG><a name="[1e1]"></a>EvrRtxMemoryPoolFreeFailed</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMemoryPoolFreeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryPoolFreeFailed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[1e2]"></a>EvrRtxMemoryPoolNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMemoryPoolNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
</UL>

<P><STRONG><a name="[1e3]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[1e4]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[1e5]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueueGet &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1e6]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1e7]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1e8]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1e9]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1ea]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueueNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[1eb]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1ec]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1ed]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueuePut &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[1ee]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[1ef]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f0]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1f1]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[1f2]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1f3]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[1f4]"></a>EvrRtxThreadError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[1f5]"></a>EvrRtxThreadExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[1f6]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1f7]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1f8]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[1f9]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[1fa]"></a>EvrRtxThreadNew</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[1fb]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[1fc]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[1fd]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[1fe]"></a>EvrRtxThreadYield</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtx_evr.o(i.EvrRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EvrRtxThreadYield &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[1ff]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[18d]"></a>Ext_Keyboard_Init</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, ext_keyboard.o(i.Ext_Keyboard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Ext_Keyboard_Init &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
</UL>

<P><STRONG><a name="[203]"></a>Ext_LED_Init</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, ext_led.o(i.Ext_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ext_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightness_to_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>Ext_LED_PWM</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, ext_led.o(i.Ext_LED_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ext_LED_PWM
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightness_to_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhSender
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[205]"></a>Ext_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ext_uart.o(i.Ext_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Ext_UART_Init &rArr; HAL_UART_Init &rArr; UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[214]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Control
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[232]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[216]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_PowerControl
</UL>

<P><STRONG><a name="[193]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Receive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[21a]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Receive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>

<P><STRONG><a name="[21c]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[24e]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Uninitialize
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>

<P><STRONG><a name="[21d]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, chat_sender.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Initialize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[24a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[198]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[215]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>

<P><STRONG><a name="[21e]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[192]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[24d]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_PowerControl
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[202]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_UART_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[201]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_UART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[222]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[289]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 410 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[27c]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Control
</UL>

<P><STRONG><a name="[223]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1756 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[224]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[227]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[226]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[228]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[225]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[22a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1200 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[200]"></a>HAL_SPI_Init</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
</UL>

<P><STRONG><a name="[22b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_SPI_Receive</STRONG> (Thumb, 648 bytes, Stack size 32 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Keyboard_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[22c]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 978 bytes, Stack size 80 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[21f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[233]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[230]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[206]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UART_Init &rArr; UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_UART_Init
</UL>

<P><STRONG><a name="[235]"></a>HAL_UART_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ext_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23a]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[239]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, phy_receiver.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[23b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phy_sender.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[63]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C3_ER_IRQHandler &rArr; I2C_ER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C3_EV_IRQHandler &rArr; I2C_EV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38c]"></a>ITM_SendChar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(i.ITM_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[9b]"></a>LCD</STRONG> (Thumb, 1724 bytes, Stack size 88 bytes, lcd.o(i.LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = LCD &rArr; guiInit &rArr; _createPagestartup &rArr; gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultFont
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutString
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetTag
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxIsChecked
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinAttachListener
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiShowPage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[94]"></a>MacReceiver</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, mac_receiver.o(i.MacReceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MacReceiver &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlCS
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[95]"></a>MacSender</STRONG> (Thumb, 726 bytes, Stack size 16 bytes, mac_sender.o(i.MacSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MacSender &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[381]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[38f]"></a>OS_Tick_Enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[38e]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[38d]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[92]"></a>PhReceiver</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, phy_receiver.o(i.PhReceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = PhReceiver &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_PWM
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[93]"></a>PhSender</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, phy_sender.o(i.PhSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = PhSender &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_PWM
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMacFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[74]"></a>SAI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI2_IRQHandler &rArr; SAI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>ScanCodeAnalyse</STRONG> (Thumb, 2100 bytes, Stack size 0 bytes, ext_keyboard.o(i.ScanCodeAnalyse))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>TimeReceiver</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, time_receiver.o(i.TimeReceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TimeReceiver &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[97]"></a>TimeSender</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, time_sender.o(i.TimeSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = TimeSender &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[9a]"></a>Touch</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, touch.o(i.Touch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Touch &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventEventWait
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxIsChecked
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[237]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[238]"></a>UART_CheckIdleState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[236]"></a>UART_SetConfig</STRONG> (Thumb, 884 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[290]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[61]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ext_uart.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>__user_perthread_libspace</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[2b1]"></a>_gcontainerCreate</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gwin_container.o(i._gcontainerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gcontainerCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
</UL>

<P><STRONG><a name="[fe]"></a>_gcontainerDestroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gwin_container.o(i._gcontainerDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gcontainerDestroy &rArr; gwinDestroy &rArr; _gwinDestroy &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_container.o(.constdata)
</UL>
<P><STRONG><a name="[2d1]"></a>_gcontainerInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gwin_container.o(i._gcontainerInit))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[df]"></a>_gdispDeInitDriver</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gdisp.o(i._gdispDeInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gdispDeInitDriver &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>_gdispInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gdisp.o(i._gdispInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gdispInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[dd]"></a>_gdispInitDriver</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gdisp.o(i._gdispInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gdispInitDriver &rArr; gfxMutexInit &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>_gdispPostInitDriver</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gdisp.o(i._gdispPostInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gdispPostInitDriver &rArr; gdispGSetClip &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFlush
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[316]"></a>_gdriverInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gdriver.o(i._gdriverInit))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[2bb]"></a>_geventInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gevent.o(i._geventInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _geventInit &rArr; gfxMutexInit &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[313]"></a>_gfileFindSlot</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, gfile.o(i._gfileFindSlot))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
</UL>

<P><STRONG><a name="[317]"></a>_gfileInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfile.o(i._gfileInit))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[2bc]"></a>_ginputInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ginput.o(i._ginputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ginputInit &rArr; _gmouseInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[e7]"></a>_gmouseDeInitDriver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ginput_mouse.o(i._gmouseDeInitDriver))
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[2bd]"></a>_gmouseInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ginput_mouse.o(i._gmouseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gmouseInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ginputInit
</UL>

<P><STRONG><a name="[e5]"></a>_gmouseInitDriver</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ginput_mouse.o(i._gmouseInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _gmouseInitDriver &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerIsActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>_gmousePostInitDriver</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ginput_mouse.o(i._gmousePostInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _gmousePostInitDriver &rArr; GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>_gosHeapInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gos_x_heap.o(i._gosHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _gosHeapInit &rArr; gfxAddHeapBlock &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAddHeapBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
</UL>

<P><STRONG><a name="[2c2]"></a>_gosInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gos_cmsis2.o(i._gosInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _gosInit &rArr; _gosHeapInit &rArr; gfxAddHeapBlock &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[318]"></a>_gosPostInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gos_cmsis2.o(i._gosPostInit))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[315]"></a>_gqueueInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gqueue.o(i._gqueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[2c3]"></a>_gtimerInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gtimer.o(i._gtimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gtimerInit &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[83]"></a>_gwidgetCreate</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gwin_widget.o(i._gwidgetCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGRadioCreate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGCheckboxCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerCreate
</UL>
<BR>[Address Reference Count : 4]<UL><LI> gwin_radio.o(i.SendRadioEvent)
<LI> gwin_checkbox.o(i.SendCheckboxEvent)
<LI> gwin_widget.o(i._gwinSendEvent)
<LI> gwin_widget.o(i.gwinAttachListener)
</UL>
<P><STRONG><a name="[f6]"></a>_gwidgetDestroy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gwin_widget.o(i._gwidgetDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gwidgetDestroy &rArr; geventDetachSourceListeners &rArr; deleteAssignments &rArr; doExitEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerDestroy
</UL>
<BR>[Address Reference Count : 4]<UL><LI> gwin_button.o(.constdata)
<LI> gwin_checkbox.o(.constdata)
<LI> gwin_label.o(.constdata)
<LI> gwin_radio.o(.constdata)
</UL>
<P><STRONG><a name="[2c8]"></a>_gwidgetInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gwin_widget.o(i._gwidgetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gwidgetInit &rArr; geventRegisterCallback &rArr; doExitEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ginputGetMouse
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[f7]"></a>_gwidgetRedraw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gwin_widget.o(i._gwidgetRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gwidgetRedraw
</UL>
<BR>[Address Reference Count : 5]<UL><LI> gwin_button.o(.constdata)
<LI> gwin_container.o(.constdata)
<LI> gwin_checkbox.o(.constdata)
<LI> gwin_label.o(.constdata)
<LI> gwin_radio.o(.constdata)
</UL>
<P><STRONG><a name="[2cc]"></a>_gwinDestroy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gwin.o(i._gwinDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gwinDestroy &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
</UL>

<P><STRONG><a name="[2cd]"></a>_gwinDrawEnd</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gwin_wm.o(i._gwinDrawEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
</UL>

<P><STRONG><a name="[2ce]"></a>_gwinDrawStart</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gwin_wm.o(i._gwinDrawStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[26e]"></a>_gwinFlushRedraws</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, gwin_wm.o(i._gwinFlushRedraws))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawTimerFn
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
</UL>

<P><STRONG><a name="[2cf]"></a>_gwinInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gwin.o(i._gwinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _gwinInit &rArr; _gwmInit &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[2d2]"></a>_gwinRippleVisibility</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, gwin_wm.o(i._gwinRippleVisibility))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _gwinRippleVisibility
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
</UL>

<P><STRONG><a name="[189]"></a>_gwinSendEvent</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gwin_widget.o(i._gwinSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gwinSendEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseUp
</UL>

<P><STRONG><a name="[188]"></a>_gwinUpdate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gwin_wm.o(i._gwinUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxCheck
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckboxMouseDown
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseUp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseDown
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetStyle
</UL>

<P><STRONG><a name="[2d5]"></a>_gwinWMAdd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gwin_wm.o(i._gwinWMAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gwinWMAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[2c5]"></a>_gwindowCreate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gwin.o(i._gwindowCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinWMAdd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>

<P><STRONG><a name="[2d0]"></a>_gwmInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gwin_wm.o(i._gwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _gwmInit &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[145]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[112]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[113]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[114]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[115]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[12a]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[163]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[15e]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[15f]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[165]"></a>_sys_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[174]"></a>_sys_seek</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[175]"></a>_sys_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[85]"></a>background_Display_Background</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui.o(i.background_Display_Background))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = background_Display_Background &rArr; gdispGFillArea &rArr; fillarea
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(i._createPagestartup)
</UL>
<P><STRONG><a name="[84]"></a>background_gray</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui.o(i.background_gray))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = background_gray &rArr; gdispGFillArea &rArr; fillarea
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gui.o(i._createPageconfigDisplay)
<LI> gui.o(i._createPagemainDisplay)
<LI> gui.o(i._createPageaddressSelectDisplay)
</UL>
<P><STRONG><a name="[263]"></a>controlCS</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mac_receiver.o(i.controlCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = controlCS
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacReceiver
</UL>

<P><STRONG><a name="[7f]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[2e7]"></a>gdispBlendColor</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gdisp.o(i.gdispBlendColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gdispBlendColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillcharline
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharline
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[2f0]"></a>gdispGBlitArea</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, gdisp.o(i.gdispGBlitArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gdispGBlitArea &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[256]"></a>gdispGClear</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, gdisp.o(i.gdispGClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdispGClear &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
</UL>

<P><STRONG><a name="[2b8]"></a>gdispGControl</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gdisp.o(i.gdispGControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdispGControl &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
</UL>

<P><STRONG><a name="[2f1]"></a>gdispGDrawBox</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, gdisp.o(i.gdispGDrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gdispGDrawBox &rArr; vline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Transparent
</UL>

<P><STRONG><a name="[2f3]"></a>gdispGDrawChar</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, gdisp.o(i.gdispGDrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gdispGDrawChar &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[2f4]"></a>gdispGDrawCircle</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, gdisp.o(i.gdispGDrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gdispGDrawCircle &rArr; drawpixel_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
</UL>

<P><STRONG><a name="[2f5]"></a>gdispGDrawLine</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gdisp.o(i.gdispGDrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gdispGDrawLine &rArr; line_clip &rArr; vline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[2f7]"></a>gdispGDrawPixel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gdisp.o(i.gdispGDrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gdispGDrawPixel &rArr; drawpixel_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[2f8]"></a>gdispGDrawStringBox</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, gdisp.o(i.gdispGDrawStringBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gdispGDrawStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[252]"></a>gdispGFillArea</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gdisp.o(i.gdispGFillArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gdispGFillArea &rArr; fillarea
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background_gray
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;background_Display_Background
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Std
</UL>

<P><STRONG><a name="[2fc]"></a>gdispGFillCircle</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, gdisp.o(i.gdispGFillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gdispGFillCircle &rArr; hline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
</UL>

<P><STRONG><a name="[2fd]"></a>gdispGFillStringBox</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, gdisp.o(i.gdispGFillStringBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[2ba]"></a>gdispGFlush</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gdisp.o(i.gdispGFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gdispGFlush &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
</UL>

<P><STRONG><a name="[20f]"></a>gdispGGetHeight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gdisp.o(i.gdispGGetHeight))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>

<P><STRONG><a name="[210]"></a>gdispGGetOrientation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gdisp.o(i.gdispGGetOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>

<P><STRONG><a name="[20e]"></a>gdispGGetWidth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gdisp.o(i.gdispGGetWidth))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[254]"></a>gdispGImageDraw</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, gdisp_image.o(i.gdispGImageDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gdispGImageDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
</UL>

<P><STRONG><a name="[b]"></a>gdispGImageDraw_BMP</STRONG> (Thumb, 610 bytes, Stack size 80 bytes, gdisp_image_bmp.o(i.gdispGImageDraw_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gdispGImageDraw_BMP &rArr; getPixels &rArr; gfileRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[2b9]"></a>gdispGSetClip</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gdisp.o(i.gdispGSetClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gdispGSetClip &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>

<P><STRONG><a name="[300]"></a>gdispGetCharWidth</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gdisp.o(i.gdispGetCharWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdispGetCharWidth &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[311]"></a>gdispGetFontMetric</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gdisp.o(i.gdispGetFontMetric))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getheight
</UL>

<P><STRONG><a name="[301]"></a>gdispGetStringWidth</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gdisp.o(i.gdispGetStringWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getwidth
</UL>

<P><STRONG><a name="[302]"></a>gdispGetStringWidthCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gdisp.o(i.gdispGetStringWidthCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
</UL>

<P><STRONG><a name="[f]"></a>gdispImageAdjustPalette_BMP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gdisp_image_bmp.o(i.gdispImageAdjustPalette_BMP))
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[304]"></a>gdispImageAlloc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gdisp_image.o(i.gdispImageAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gdispImageAlloc &rArr; gfxAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageCache_BMP
</UL>

<P><STRONG><a name="[a]"></a>gdispImageCache_BMP</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, gdisp_image_bmp.o(i.gdispImageCache_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdispImageCache_BMP &rArr; getPixels &rArr; gfileRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[250]"></a>gdispImageClose</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gdisp_image.o(i.gdispImageClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdispImageClose &rArr; gfileClose
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDestroy
</UL>

<P><STRONG><a name="[9]"></a>gdispImageClose_BMP</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gdisp_image_bmp.o(i.gdispImageClose_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gdispImageClose_BMP &rArr; gdispImageFree &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageFree
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[306]"></a>gdispImageFree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gdisp_image.o(i.gdispImageFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gdispImageFree &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose_BMP
</UL>

<P><STRONG><a name="[d]"></a>gdispImageGetPaletteSize_BMP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gdisp_image_bmp.o(i.gdispImageGetPaletteSize_BMP))
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>gdispImageGetPalette_BMP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gdisp_image_bmp.o(i.gdispImageGetPalette_BMP))
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[326]"></a>gdispImageInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gdisp_image.o(i.gdispImageInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
</UL>

<P><STRONG><a name="[24f]"></a>gdispImageIsOpen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gdisp_image.o(i.gdispImageIsOpen))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDestroy
</UL>

<P><STRONG><a name="[c]"></a>gdispImageNext_BMP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gdisp_image_bmp.o(i.gdispImageNext_BMP))
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[307]"></a>gdispImageOpenGFile</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gdisp_image.o(i.gdispImageOpenGFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdispImageOpenGFile &rArr; gfileSetPos
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiResourcesManagerInit
</UL>

<P><STRONG><a name="[8]"></a>gdispImageOpen_BMP</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, gdisp_image_bmp.o(i.gdispImageOpen_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gdispImageOpen_BMP &rArr; gdispImageClose_BMP &rArr; gdispImageFree &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileRead
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose_BMP
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_image.o(.data)
</UL>
<P><STRONG><a name="[253]"></a>gdispImageSetBgColor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gdisp_image.o(i.gdispImageSetBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
</UL>

<P><STRONG><a name="[257]"></a>gdispOpenFont</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gdisp_fonts.o(i.gdispOpenFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdispOpenFont
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_font_list
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchfont
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiResourcesManagerInit
</UL>

<P><STRONG><a name="[2b3]"></a>gdriverGetInstance</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gdriver.o(i.gdriverGetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdriverGetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispDeInitDriver
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ginputGetMouse
</UL>

<P><STRONG><a name="[26a]"></a>gdriverGetNext</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gdriver.o(i.gdriverGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MousePoll
</UL>

<P><STRONG><a name="[2b6]"></a>gdriverRegister</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, gdriver.o(i.gdriverRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInit
</UL>

<P><STRONG><a name="[2cb]"></a>geventAttachSource</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gevent.o(i.geventAttachSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = geventAttachSource &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinAttachListener
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[2c7]"></a>geventDetachSourceListeners</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gevent.o(i.geventDetachSourceListeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = geventDetachSourceListeners &rArr; deleteAssignments &rArr; doExitEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAssignments
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>

<P><STRONG><a name="[28e]"></a>geventEventWait</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gevent.o(i.geventEventWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = geventEventWait &rArr; gfxSemWait &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
</UL>

<P><STRONG><a name="[285]"></a>geventGetEventBuffer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gevent.o(i.geventGetEventBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = geventGetEventBuffer &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
</UL>

<P><STRONG><a name="[213]"></a>geventGetSourceListener</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gevent.o(i.geventGetSourceListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = geventGetSourceListener &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
</UL>

<P><STRONG><a name="[25b]"></a>geventListenerInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gevent.o(i.geventListenerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = geventListenerInit &rArr; gfxSemInit &rArr; osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[2c9]"></a>geventRegisterCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gevent.o(i.geventRegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = geventRegisterCallback &rArr; doExitEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[286]"></a>geventSendEvent</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gevent.o(i.geventSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
</UL>

<P><STRONG><a name="[305]"></a>gfileClose</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gfile.o(i.gfileClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose
</UL>

<P><STRONG><a name="[30e]"></a>gfileGetPos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfile.o(i.gfileGetPos))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
</UL>

<P><STRONG><a name="[2af]"></a>gfileOpen</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gfile.o(i.gfileOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gfileOpen &rArr; testopen
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfileFindSlot
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testopen
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiResourcesManagerInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
</UL>

<P><STRONG><a name="[308]"></a>gfileRead</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gfile.o(i.gfileRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfileRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
</UL>

<P><STRONG><a name="[2fe]"></a>gfileSetPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gfile.o(i.gfileSetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gfileSetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageCache_BMP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[2c1]"></a>gfxAddHeapBlock</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gos_x_heap.o(i.gfxAddHeapBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfxAddHeapBlock &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosHeapInit
</UL>

<P><STRONG><a name="[2d4]"></a>gfxAlloc</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gos_x_heap.o(i.gfxAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageAlloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[2c6]"></a>gfxFree</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gos_x_heap.o(i.gfxFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetText
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAddHeapBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
</UL>

<P><STRONG><a name="[255]"></a>gfxInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gfx.o(i.gfxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gfxInit &rArr; _gwinInit &rArr; _gwmInit &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfileInit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_geventInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdriverInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gqueueInit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosPostInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ginputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[2b7]"></a>gfxMutexInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gos_cmsis2.o(i.gfxMutexInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfxMutexInit &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_geventInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
</UL>

<P><STRONG><a name="[2d6]"></a>gfxQueueASyncInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gqueue.o(i.gfxQueueASyncInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
</UL>

<P><STRONG><a name="[291]"></a>gfxQueueASyncPut</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gqueue.o(i.gfxQueueASyncPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gfxQueueASyncPut &rArr; osKernelUnlock &rArr; EvrRtxKernelUnlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPutI
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>

<P><STRONG><a name="[31a]"></a>gfxQueueASyncPutI</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gqueue.o(i.gfxQueueASyncPutI))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>

<P><STRONG><a name="[292]"></a>gfxQueueASyncRemove</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gqueue.o(i.gfxQueueASyncRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gfxQueueASyncRemove &rArr; osKernelUnlock &rArr; EvrRtxKernelUnlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemoveI
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
</UL>

<P><STRONG><a name="[31c]"></a>gfxQueueASyncRemoveI</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gqueue.o(i.gfxQueueASyncRemoveI))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
</UL>

<P><STRONG><a name="[2c4]"></a>gfxSemInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gos_cmsis2.o(i.gfxSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gfxSemInit &rArr; osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
</UL>

<P><STRONG><a name="[208]"></a>gfxSemWait</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gos_cmsis2.o(i.gfxSemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gfxSemWait &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventEventWait
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
</UL>

<P><STRONG><a name="[31f]"></a>gfxThreadCreate</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, gos_cmsis2.o(i.gfxThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gfxThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
</UL>

<P><STRONG><a name="[2ca]"></a>ginputGetMouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ginput_mouse.o(i.ginputGetMouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ginputGetMouse &rArr; gdriverGetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[2a3]"></a>gstudioGetFont</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, resources_manager.o(i.gstudioGetFont))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[322]"></a>gstudioGetImage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, resources_manager.o(i.gstudioGetImage))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiResourcesManagerInit
</UL>

<P><STRONG><a name="[2ae]"></a>gstudioGetImageFilePath</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, resources_manager.o(i.gstudioGetImageFilePath))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiResourcesManagerInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
</UL>

<P><STRONG><a name="[2d7]"></a>gtimerInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gtimer.o(i.gtimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
</UL>

<P><STRONG><a name="[2be]"></a>gtimerIsActive</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gtimer.o(i.gtimerIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInitDriver
</UL>

<P><STRONG><a name="[2d3]"></a>gtimerJab</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gtimer.o(i.gtimerJab))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>

<P><STRONG><a name="[2bf]"></a>gtimerStart</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, gtimer.o(i.gtimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gtimerStart &rArr; gfxThreadCreate &rArr; osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInitDriver
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
</UL>

<P><STRONG><a name="[25a]"></a>guiInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui.o(i.guiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = guiInit &rArr; _createPagestartup &rArr; gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiResourcesManagerInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[321]"></a>guiResourcesManagerInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, resources_manager.o(i.guiResourcesManagerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = guiResourcesManagerInit &rArr; gfileOpen &rArr; testopen
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetImage
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetImageFilePath
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[25d]"></a>guiShowPage</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gui.o(i.guiShowPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = guiShowPage &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[25c]"></a>gwinAttachListener</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gwin_widget.o(i.gwinAttachListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gwinAttachListener &rArr; geventAttachSource &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[f8]"></a>gwinButtonDraw_Normal</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, gwin_button.o(i.gwinButtonDraw_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gwinButtonDraw_Normal &rArr; gdispGDrawStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispBlendColor
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getButtonColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_button.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>gwinCheckboxCheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gwin_checkbox.o(i.gwinCheckboxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gwinCheckboxCheck &rArr; SendCheckboxEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
</UL>

<P><STRONG><a name="[fb]"></a>gwinCheckboxDraw_CheckOnLeft</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, gwin_checkbox.o(i.gwinCheckboxDraw_CheckOnLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gwinCheckboxDraw_CheckOnLeft &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCheckboxColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_checkbox.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>gwinCheckboxIsChecked</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gwin_checkbox.o(i.gwinCheckboxIsChecked))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[ff]"></a>gwinContainerDraw_Std</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gwin_container.o(i.gwinContainerDraw_Std))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gwinContainerDraw_Std &rArr; gwinContainerDraw_Transparent &rArr; gdispGDrawBox &rArr; vline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Transparent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_container.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>gwinContainerDraw_Transparent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gwin_container.o(i.gwinContainerDraw_Transparent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gwinContainerDraw_Transparent &rArr; gdispGDrawBox &rArr; vline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Std
</UL>

<P><STRONG><a name="[2b2]"></a>gwinDestroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gwin.o(i.gwinDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gwinDestroy &rArr; _gwinDestroy &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerDestroy
</UL>

<P><STRONG><a name="[2a6]"></a>gwinGButtonCreate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gwin_button.o(i.gwinGButtonCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gwinGButtonCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[2a8]"></a>gwinGCheckboxCreate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gwin_checkbox.o(i.gwinGCheckboxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gwinGCheckboxCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
</UL>

<P><STRONG><a name="[2ab]"></a>gwinGConsoleCreate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gwin_console.o(i.gwinGConsoleCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gwinGConsoleCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
</UL>

<P><STRONG><a name="[2a1]"></a>gwinGContainerCreate</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gwin_container.o(i.gwinGContainerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gwinGContainerCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[2ad]"></a>gwinGImageCreate</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gwin_image.o(i.gwinGImageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gwinGImageCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageInit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
</UL>

<P><STRONG><a name="[2a2]"></a>gwinGLabelCreate</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gwin_label.o(i.gwinGLabelCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetDefaultFont
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getwidth
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getheight
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[2a5]"></a>gwinGRadioCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gwin_radio.o(i.gwinGRadioCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gwinGRadioCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[251]"></a>gwinGetDefaultBgColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gwin.o(i.gwinGetDefaultBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
</UL>

<P><STRONG><a name="[327]"></a>gwinGetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gwin.o(i.gwinGetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
</UL>

<P><STRONG><a name="[295]"></a>gwinGetFirstChild</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gwin_container.o(i.gwinGetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gwinGetFirstChild
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerDestroy
</UL>

<P><STRONG><a name="[297]"></a>gwinGetNextWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gwin_wm.o(i.gwinGetNextWindow))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinRippleVisibility
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwidgetEvent
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioGetActive
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
</UL>

<P><STRONG><a name="[296]"></a>gwinGetSibling</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gwin_container.o(i.gwinGetSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gwinGetSibling
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>

<P><STRONG><a name="[260]"></a>gwinGetTag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gwin_widget.o(i.gwinGetTag))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[2b0]"></a>gwinImageOpenGFile</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gwin_image.o(i.gwinImageOpenGFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gwinImageOpenGFile &rArr; _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageIsOpen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
</UL>

<P><STRONG><a name="[103]"></a>gwinLabelDrawJustifiedLeft</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gwin_label.o(i.gwinLabelDrawJustifiedLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gwinLabelDrawJustifiedLeft &rArr; gwinLabelDraw &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_label.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>gwinPutChar</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, gwin_console.o(i.gwinPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gwinPutChar &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetFontMetric
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetCharWidth
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCtoAttr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCPrintColor
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutString
</UL>

<P><STRONG><a name="[261]"></a>gwinPutString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gwin_console.o(i.gwinPutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gwinPutString &rArr; gwinPutChar &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[104]"></a>gwinRadioDraw_Radio</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, gwin_radio.o(i.gwinRadioDraw_Radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gwinRadioDraw_Radio &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrawColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_radio.o(.constdata)
</UL>
<P><STRONG><a name="[32e]"></a>gwinRadioGetActive</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gwin_radio.o(i.gwinRadioGetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gwinRadioGetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
</UL>

<P><STRONG><a name="[26d]"></a>gwinRadioPress</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gwin_radio.o(i.gwinRadioPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gwinRadioPress &rArr; SendRadioEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioGetActive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMouseDown
</UL>

<P><STRONG><a name="[32f]"></a>gwinRedraw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gwin_wm.o(i.gwinRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gwinRedraw &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[329]"></a>gwinResize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gwin_wm.o(i.gwinResize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gwinResize
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[331]"></a>gwinSetDefaultBgColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gwin.o(i.gwinSetDefaultBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[258]"></a>gwinSetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gwin.o(i.gwinSetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[259]"></a>gwinSetDefaultStyle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gwin_widget.o(i.gwinSetDefaultStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gwinSetDefaultStyle &rArr; gwinRedraw &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultBgColor
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetStyle
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[2a4]"></a>gwinSetFont</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gwin.o(i.gwinSetFont))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[330]"></a>gwinSetStyle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gwin_widget.o(i.gwinSetStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gwinSetStyle &rArr; _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[25e]"></a>gwinSetText</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gwin_widget.o(i.gwinSetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gwinSetText &rArr; _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
</UL>

<P><STRONG><a name="[294]"></a>gwinSetVisible</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gwin_wm.o(i.gwinSetVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gwinSetVisible &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinRippleVisibility
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiShowPage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGRadioCreate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGCheckboxCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>

<P><STRONG><a name="[2a0]"></a>gwinWidgetClearInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gwin_widget.o(i.gwinWidgetClearInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagestartup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPagemainDisplay
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageconfigDisplay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_createPageaddressSelectDisplay
</UL>

<P><STRONG><a name="[333]"></a>i2cInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f7_i2c.o(i.i2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[389]"></a>i2cReadByte</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32f7_i2c.o(i.i2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2cReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
</UL>

<P><STRONG><a name="[38a]"></a>i2cReadWord</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32f7_i2c.o(i.i2cReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2cReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
</UL>

<P><STRONG><a name="[39c]"></a>i2cWriteReg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7_i2c.o(i.i2cWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2cWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[204]"></a>lightness_to_pwm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ext_led.o(i.lightness_to_pwm))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_PWM
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_Init
</UL>

<P><STRONG><a name="[12e]"></a>main</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_UART_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_PWM
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_LED_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e0]"></a>mf_character_width</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mf_font.o(i.mf_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetCharWidth
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wordlen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_char
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_prev_tab
</UL>

<P><STRONG><a name="[344]"></a>mf_compute_kerning</STRONG> (Thumb, 284 bytes, Stack size 96 bytes, mf_kerning.o(i.mf_compute_kerning))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max16
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_kerning
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg16
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
</UL>

<P><STRONG><a name="[309]"></a>mf_get_font_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mf_font.o(i.mf_get_font_list))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
</UL>

<P><STRONG><a name="[303]"></a>mf_get_string_width</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, mf_justify.o(i.mf_get_string_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
</UL>

<P><STRONG><a name="[2df]"></a>mf_getchar</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mf_encoding.o(i.mf_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wordlen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_char
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_spaces
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
</UL>

<P><STRONG><a name="[2fa]"></a>mf_render_aligned</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, mf_justify.o(i.mf_render_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_spaces
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_fillline_callback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_drawline_callback
</UL>

<P><STRONG><a name="[2e5]"></a>mf_render_character</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, mf_font.o(i.mf_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_render_character
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillcharglyph
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharglyph
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
</UL>

<P><STRONG><a name="[38b]"></a>mf_rewind</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mf_encoding.o(i.mf_rewind))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_lines
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
</UL>

<P><STRONG><a name="[ea]"></a>mf_rlefont_character_width</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mf_rlefont.o(i.mf_rlefont_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mf_rlefont_character_width &rArr; find_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_font.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>mf_rlefont_render_character</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, mf_rlefont.o(i.mf_rlefont_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mf_rlefont_render_character &rArr; write_glyph_codeword &rArr; write_ref_dictentry &rArr; write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_glyph_codeword
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_font.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>mf_scaled_character_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mf_scaledfont.o(i.mf_scaled_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mf_scaled_character_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_font.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>mf_scaled_render_character</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, mf_scaledfont.o(i.mf_scaled_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mf_scaled_render_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_font.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>mf_wordwrap</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, mf_wordwrap.o(i.mf_wordwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mf_wordwrap &rArr; append_word &rArr; get_wordlen &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_lines
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_word
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_char
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
</UL>

<P><STRONG><a name="[183]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[28f]"></a>osEventFlagsClear</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_evflags.o(i.osEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osEventFlagsClear &rArr; svcRtxEventFlagsClear &rArr; EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
</UL>

<P><STRONG><a name="[342]"></a>osEventFlagsNew</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_evflags.o(i.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osEventFlagsNew &rArr; EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23c]"></a>osEventFlagsSet</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, rtx_evflags.o(i.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSet
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[28d]"></a>osEventFlagsWait</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_evflags.o(i.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osEventFlagsWait &rArr; isrRtxEventFlagsWait &rArr; EvrRtxEventFlagsWaitNotCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWait
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
</UL>

<P><STRONG><a name="[354]"></a>osKernelGetState</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[209]"></a>osKernelGetTickCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_SendCommand
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[211]"></a>osKernelGetTickFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
</UL>

<P><STRONG><a name="[2dc]"></a>osKernelInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[319]"></a>osKernelLock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelLock &rArr; EvrRtxKernelLock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>

<P><STRONG><a name="[343]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31b]"></a>osKernelUnlock</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osKernelUnlock &rArr; EvrRtxKernelUnlock &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>

<P><STRONG><a name="[18e]"></a>osMemoryPoolAlloc</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rtx_mempool.o(i.osMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMemoryPoolAlloc &rArr; osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocFailed
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacReceiver
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
</UL>

<P><STRONG><a name="[196]"></a>osMemoryPoolFree</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_mempool.o(i.osMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMemoryPoolFree &rArr; isrRtxMemoryPoolFree &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
</UL>

<P><STRONG><a name="[341]"></a>osMemoryPoolNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_mempool.o(i.osMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMemoryPoolNew &rArr; EvrRtxMemoryPoolNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolNew
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>osMessageQueueGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeReceiver
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhSender
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacReceiver
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatReceiver
</UL>

<P><STRONG><a name="[264]"></a>osMessageQueueNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>osMessageQueuePut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSender
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeReceiver
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhSender
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhReceiver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacSender
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MacReceiver
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatSender
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChatReceiver
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[20a]"></a>osMutexAcquire</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispDeInitDriver
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFlush
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGControl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[2b4]"></a>osMutexDelete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispDeInitDriver
</UL>

<P><STRONG><a name="[2db]"></a>osMutexNew</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
</UL>

<P><STRONG><a name="[20b]"></a>osMutexRelease</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispDeInitDriver
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFlush
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGControl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[361]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[b5]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[29e]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_kernel.o(i.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[358]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(i.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[362]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[364]"></a>osRtxMemoryFree</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[365]"></a>osRtxMemoryInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[33a]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[336]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[369]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[36d]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_msgqueue.o(i.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[36e]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[36f]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mutex.o(i.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[13a]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[337]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMemoryPoolFree
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[373]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[371]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[36a]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[37c]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[35f]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[370]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[375]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
</UL>

<P><STRONG><a name="[36c]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[392]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[37d]"></a>osRtxThreadStartup</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[37a]"></a>osRtxThreadSwitch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[37e]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[360]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolFree
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[13b]"></a>osRtxTick_Handler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[110]"></a>osRtxTimerSetup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_timer.o(i.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[10f]"></a>osRtxTimerThread</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[31e]"></a>osSemaphoreAcquire</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
</UL>

<P><STRONG><a name="[31d]"></a>osSemaphoreNew</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
</UL>

<P><STRONG><a name="[293]"></a>osSemaphoreRelease</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
</UL>

<P><STRONG><a name="[c2]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[29d]"></a>osThreadGetId</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[320]"></a>osThreadNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
</UL>

<P><STRONG><a name="[207]"></a>osThreadYield</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadYield &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadYield
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_reload
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
</UL>

<P><STRONG><a name="[17d]"></a>$Super$$_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[410]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[411]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[288]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 208 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>_createPageaddressSelectDisplay</STRONG> (Thumb, 1964 bytes, Stack size 48 bytes, gui.o(i._createPageaddressSelectDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _createPageaddressSelectDisplay &rArr; gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFont
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGRadioCreate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[2a7]"></a>_createPageconfigDisplay</STRONG> (Thumb, 2156 bytes, Stack size 48 bytes, gui.o(i._createPageconfigDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _createPageconfigDisplay &rArr; gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFont
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGCheckboxCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxCheck
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[2aa]"></a>_createPagemainDisplay</STRONG> (Thumb, 840 bytes, Stack size 48 bytes, gui.o(i._createPagemainDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _createPagemainDisplay &rArr; gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFont
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[2ac]"></a>_createPagestartup</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, gui.o(i._createPagestartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _createPagestartup &rArr; gwinGLabelCreate &rArr; getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFont
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetImageFilePath
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gstudioGetFont
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[350]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_delay.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[351]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[9f]"></a>svcRtxDelay</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[19c]"></a>EventFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_evflags.o(i.EventFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_any
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxEventFlagsWait
</UL>

<P><STRONG><a name="[19f]"></a>EventFlagsClear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_evflags.o(i.EventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_clr32
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>

<P><STRONG><a name="[1a1]"></a>EventFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_evflags.o(i.EventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventFlagsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_evflags_c_e167c757__atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
</UL>

<P><STRONG><a name="[352]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_evflags.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[353]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_evflags.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[334]"></a>isrRtxEventFlagsWait</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rtx_evflags.o(i.isrRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = isrRtxEventFlagsWait &rArr; EvrRtxEventFlagsWaitNotCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[be]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_evflags.o(i.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[a0]"></a>svcRtxEventFlagsClear</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_evflags.o(i.svcRtxEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxEventFlagsClear &rArr; EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClearDone
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsClear)
</UL>
<P><STRONG><a name="[a1]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtx_evflags.o(i.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsNew)
</UL>
<P><STRONG><a name="[a2]"></a>svcRtxEventFlagsSet</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rtx_evflags.o(i.svcRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxEventFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsSet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsSet)
</UL>
<P><STRONG><a name="[a3]"></a>svcRtxEventFlagsWait</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, rtx_evflags.o(i.svcRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxEventFlagsWait &rArr; EvrRtxEventFlagsWaitPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitPending
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitNotCompleted
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(i.osEventFlagsWait)
</UL>
<P><STRONG><a name="[355]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[356]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
</UL>

<P><STRONG><a name="[357]"></a>IsPrivileged</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[390]"></a>__set_CONTROL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_kernel.o(i.__set_CONTROL))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[a4]"></a>svcRtxKernelGetState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[a5]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[a6]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[a7]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 528 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[a8]"></a>svcRtxKernelLock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelLock &rArr; EvrRtxKernelLocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelLocked
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelLock)
</UL>
<P><STRONG><a name="[a9]"></a>svcRtxKernelStart</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_CONTROL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[aa]"></a>svcRtxKernelUnlock</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelUnlock &rArr; EvrRtxKernelUnlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelUnlocked
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelUnlock)
</UL>
<P><STRONG><a name="[29c]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[363]"></a>MemBlockPtr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_memory.o(i.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[359]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
</UL>

<P><STRONG><a name="[35a]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mempool.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
</UL>

<P><STRONG><a name="[335]"></a>isrRtxMemoryPoolFree</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_mempool.o(i.isrRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = isrRtxMemoryPoolFree &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFreeFailed
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDeallocated
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolFree
</UL>

<P><STRONG><a name="[bf]"></a>osRtxMemoryPoolPostProcess</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_mempool.o(i.osRtxMemoryPoolPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxMemoryPoolPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.svcRtxMemoryPoolNew)
</UL>
<P><STRONG><a name="[ab]"></a>svcRtxMemoryPoolAlloc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rtx_mempool.o(i.svcRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMemoryPoolAlloc &rArr; osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocPending
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocFailed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.osMemoryPoolAlloc)
</UL>
<P><STRONG><a name="[ac]"></a>svcRtxMemoryPoolFree</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, rtx_mempool.o(i.svcRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxMemoryPoolFree &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolFreeFailed
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolDeallocated
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.osMemoryPoolFree)
</UL>
<P><STRONG><a name="[ad]"></a>svcRtxMemoryPoolNew</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, rtx_mempool.o(i.svcRtxMemoryPoolNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxMemoryPoolNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolError
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolCreated
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mempool.o(i.osMemoryPoolNew)
</UL>
<P><STRONG><a name="[35b]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[35c]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[265]"></a>MessageQueueGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec32_nz
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[268]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[36b]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[338]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[339]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[c0]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[ae]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[af]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[b0]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[35d]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mutex.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[35e]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mutex.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[b1]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[b2]"></a>svcRtxMutexDelete</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[b3]"></a>svcRtxMutexNew</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[b4]"></a>svcRtxMutexRelease</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[385]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[386]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[281]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[283]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[c1]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[b7]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[b8]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[b9]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[33b]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[33e]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[387]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[388]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[28a]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[378]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[372]"></a>osRtxThreadBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[37f]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[380]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[376]"></a>osRtxThreadDestroy</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[377]"></a>osRtxThreadFree</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[379]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[37b]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[374]"></a>osRtxThreadListRoot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c3]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[393]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[ba]"></a>svcRtxThreadExit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[bb]"></a>svcRtxThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadGetId &rArr; EvrRtxThreadGetId &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[bc]"></a>svcRtxThreadNew</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[bd]"></a>svcRtxThreadYield</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxThreadYield &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadYield)
</UL>
<P><STRONG><a name="[384]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[382]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[383]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_timer.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[b6]"></a>osRtxTimerTick</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[24c]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[ce]"></a>I2C3_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f7xx.o(i.I2C3_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2C3_Control &rArr; I2C_Control &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>I2C3_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C3_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>I2C3_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C3_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>I2C3_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C3_Initialize &rArr; I2C_Initialize &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>I2C3_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f7xx.o(i.I2C3_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C3_MasterReceive &rArr; I2C_MasterReceive &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>I2C3_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f7xx.o(i.I2C3_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C3_MasterTransmit &rArr; I2C_MasterTransmit &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>I2C3_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C3_PowerControl &rArr; I2C_PowerControl &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>I2C3_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f7xx.o(i.I2C3_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C3_SlaveReceive &rArr; I2C_SlaveReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>I2C3_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f7xx.o(i.I2C3_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C3_SlaveTransmit &rArr; I2C_SlaveTransmit &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>I2C3_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C3_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C3_Uninitialize &rArr; I2C_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>I2CX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_stm32f7xx.o(i.I2CX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>I2CX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2CX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>I2C_Control</STRONG> (Thumb, 744 bytes, Stack size 80 bytes, i2c_stm32f7xx.o(i.I2C_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = I2C_Control &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTimingValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Control
</UL>

<P><STRONG><a name="[23e]"></a>I2C_ER_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, i2c_stm32f7xx.o(i.I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
</UL>

<P><STRONG><a name="[23f]"></a>I2C_EV_IRQHandler</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, i2c_stm32f7xx.o(i.I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>I2C_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_stm32f7xx.o(i.I2C_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_GetDataCount
</UL>

<P><STRONG><a name="[24b]"></a>I2C_GetSCLRatio</STRONG> (Thumb, 198 bytes, Stack size 44 bytes, i2c_stm32f7xx.o(i.I2C_GetSCLRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_GetSCLRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTimingValue
</UL>

<P><STRONG><a name="[241]"></a>I2C_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_stm32f7xx.o(i.I2C_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_GetStatus
</UL>

<P><STRONG><a name="[249]"></a>I2C_GetTimingValue</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, i2c_stm32f7xx.o(i.I2C_GetTimingValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_GetTimingValue &rArr; I2C_GetSCLRatio
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetSCLRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[242]"></a>I2C_Initialize</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, i2c_stm32f7xx.o(i.I2C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C_Initialize &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Initialize
</UL>

<P><STRONG><a name="[243]"></a>I2C_MasterReceive</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, i2c_stm32f7xx.o(i.I2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_MasterReceive &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MasterReceive
</UL>

<P><STRONG><a name="[244]"></a>I2C_MasterTransmit</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, i2c_stm32f7xx.o(i.I2C_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2C_MasterTransmit &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MasterTransmit
</UL>

<P><STRONG><a name="[245]"></a>I2C_PowerControl</STRONG> (Thumb, 912 bytes, Stack size 24 bytes, i2c_stm32f7xx.o(i.I2C_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C_PowerControl &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_PowerControl
</UL>

<P><STRONG><a name="[246]"></a>I2C_SlaveReceive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SlaveReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_SlaveReceive
</UL>

<P><STRONG><a name="[247]"></a>I2C_SlaveTransmit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, i2c_stm32f7xx.o(i.I2C_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_SlaveTransmit &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_SlaveTransmit
</UL>

<P><STRONG><a name="[248]"></a>I2C_Uninitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c_stm32f7xx.o(i.I2C_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Uninitialize
</UL>

<P><STRONG><a name="[27d]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Initialize
</UL>

<P><STRONG><a name="[d0]"></a>SAI2_A_DMA_Complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_A_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI2_A_DMA_Complete &rArr; SAI_TX_DMA_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TX_DMA_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>SAI2_B_DMA_Complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_B_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI2_B_DMA_Complete &rArr; SAI_RX_DMA_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_RX_DMA_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>SAI2_Control</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sai_stm32f7xx.o(i.SAI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SAI2_Control &rArr; SAI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>SAI2_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI2_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>SAI2_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI2_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>SAI2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI2_GetStatus &rArr; SAI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>SAI2_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI2_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>SAI2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAI2_Initialize &rArr; SAI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>SAI2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAI2_PowerControl &rArr; SAI_PowerControl &rArr; HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>SAI2_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sai_stm32f7xx.o(i.SAI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SAI2_Receive &rArr; SAI_Receive &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>SAI2_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sai_stm32f7xx.o(i.SAI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SAI2_Send &rArr; SAI_Send &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>SAI2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SAI2_Uninitialize &rArr; SAI_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[271]"></a>SAI_Control</STRONG> (Thumb, 2034 bytes, Stack size 112 bytes, sai_stm32f7xx.o(i.SAI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SAI_Control &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_Control
</UL>

<P><STRONG><a name="[272]"></a>SAI_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sai_stm32f7xx.o(i.SAI_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_GetCapabilities
</UL>

<P><STRONG><a name="[273]"></a>SAI_GetRxCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sai_stm32f7xx.o(i.SAI_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_GetRxCount
</UL>

<P><STRONG><a name="[274]"></a>SAI_GetStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_GetStatus
</UL>

<P><STRONG><a name="[275]"></a>SAI_GetTxCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sai_stm32f7xx.o(i.SAI_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_GetTxCount
</UL>

<P><STRONG><a name="[d2]"></a>SAI_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_stm32f7xx.o(.constdata)
</UL>
<P><STRONG><a name="[276]"></a>SAI_IRQHandler</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, sai_stm32f7xx.o(i.SAI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
</UL>

<P><STRONG><a name="[277]"></a>SAI_Initialize</STRONG> (Thumb, 948 bytes, Stack size 40 bytes, sai_stm32f7xx.o(i.SAI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SAI_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_Initialize
</UL>

<P><STRONG><a name="[278]"></a>SAI_PowerControl</STRONG> (Thumb, 688 bytes, Stack size 16 bytes, sai_stm32f7xx.o(i.SAI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_PowerControl &rArr; HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_PowerControl
</UL>

<P><STRONG><a name="[270]"></a>SAI_RX_DMA_Complete</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI_RX_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_RX_DMA_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_B_DMA_Complete
</UL>

<P><STRONG><a name="[279]"></a>SAI_Receive</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, sai_stm32f7xx.o(i.SAI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SAI_Receive &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_Receive
</UL>

<P><STRONG><a name="[27a]"></a>SAI_Send</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, sai_stm32f7xx.o(i.SAI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SAI_Send &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_Send
</UL>

<P><STRONG><a name="[26f]"></a>SAI_TX_DMA_Complete</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI_TX_DMA_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_TX_DMA_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_A_DMA_Complete
</UL>

<P><STRONG><a name="[27b]"></a>SAI_Uninitialize</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, sai_stm32f7xx.o(i.SAI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SAI_Uninitialize &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_Uninitialize
</UL>

<P><STRONG><a name="[27e]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sai_stm32f7xx.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_PowerControl
</UL>

<P><STRONG><a name="[27f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sai_stm32f7xx.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_PowerControl
</UL>

<P><STRONG><a name="[1a8]"></a>EventCheckFilter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eventrecorder.o(i.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1a3]"></a>EventGetTS</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eventrecorder.o(i.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventGetTS
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_wr32
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1a9]"></a>EventRecordItem</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, eventrecorder.o(i.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__UnlockRecord
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__LockRecord
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1ab]"></a>GetContext</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eventrecorder.o(i.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[1b0]"></a>crc16_ccitt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, eventrecorder.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[2dd]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(i.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[220]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[221]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[217]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[219]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[21b]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[22e]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[22f]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[280]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_WaitFifoStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[22d]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f7xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[80]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[231]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[82]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; CheckRetCode &rArr; __2printf &rArr; _printf_char_file &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[181]"></a>BSP_SDRAM_Initialization_sequence</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f746g_discovery_sdram.o(i.BSP_SDRAM_Initialization_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSP_SDRAM_Initialization_sequence &rArr; _HAL_SDRAM_SendCommand &rArr; _FMC_SDRAM_SendCommand &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_SendCommand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[17f]"></a>BSP_SDRAM_MspInit</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, stm32f746g_discovery_sdram.o(i.BSP_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_DMA_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[299]"></a>_FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[29b]"></a>_FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[298]"></a>_FMC_SDRAM_SendCommand</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _FMC_SDRAM_SendCommand &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[29a]"></a>_FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[186]"></a>_HAL_DMA_DeInit</STRONG> (Thumb, 3924 bytes, Stack size 0 bytes, stm32f746g_discovery_sdram.o(i._HAL_DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[187]"></a>_HAL_DMA_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f746g_discovery_sdram.o(i._HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[180]"></a>_HAL_SDRAM_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HAL_SDRAM_Init &rArr; _FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_Timing_Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[184]"></a>_HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[182]"></a>_HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _HAL_SDRAM_SendCommand &rArr; _FMC_SDRAM_SendCommand &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[2d8]"></a>_ltdc_init</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, gdisp_lld_stm32ltdc.o(i._ltdc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ltdc_init &rArr; _ltdc_reload &rArr; osThreadYield &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_reload
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_layer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[2da]"></a>_ltdc_layer_init</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, gdisp_lld_stm32ltdc.o(i._ltdc_layer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ltdc_layer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_init
</UL>

<P><STRONG><a name="[2d9]"></a>_ltdc_reload</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i._ltdc_reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ltdc_reload &rArr; osThreadYield &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_init
</UL>

<P><STRONG><a name="[30c]"></a>configureLcdPins</STRONG> (Thumb, 442 bytes, Stack size 0 bytes, gdisp_lld_stm32ltdc.o(i.configureLcdPins))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[30d]"></a>dma2d_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gdisp_lld_stm32ltdc.o(i.dma2d_init))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[e4]"></a>gdisp_lld_control</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdisp_lld_control
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_backlight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>gdisp_lld_draw_pixel</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdisp_lld_draw_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>gdisp_lld_fill_area</STRONG> (Thumb, 368 bytes, Stack size 20 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_fill_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gdisp_lld_fill_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>gdisp_lld_get_pixel_color</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_get_pixel_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gdisp_lld_get_pixel_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>gdisp_lld_init</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gdisp_lld_init &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_Initialization_sequence &rArr; _HAL_SDRAM_SendCommand &rArr; _FMC_SDRAM_SendCommand &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount &rArr; EvrRtxKernelGetTickCount &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_backlight
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2d_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureLcdPins
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_reload
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_layer_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[30b]"></a>set_backlight</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gdisp_lld_stm32ltdc.o(i.set_backlight))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_control
</UL>

<P><STRONG><a name="[e8]"></a>ft5336Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.ft5336Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ft5336Init &rArr; osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ft5336ReadXYZ</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.ft5336ReadXYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ft5336ReadXYZ &rArr; read_word &rArr; i2cReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[2ec]"></a>init_board</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.init_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_board &rArr; i2cInit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[2ed]"></a>read_byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_byte &rArr; i2cReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336ReadXYZ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[2ef]"></a>read_word</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_word &rArr; i2cReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336ReadXYZ
</UL>

<P><STRONG><a name="[2ee]"></a>write_reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_reg &rArr; i2cWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[8d]"></a>drawcharglyph</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gdisp.o(i.drawcharglyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drawcharglyph &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gdisp.o(i.gdispGDrawStringBox)
<LI> gdisp.o(i.mf_drawline_callback)
</UL>
<P><STRONG><a name="[89]"></a>drawcharline</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, gdisp.o(i.drawcharline))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drawcharline &rArr; hline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispBlendColor
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gdisp.o(i.drawcharglyph)
<LI> gdisp.o(i.gdispGDrawChar)
</UL>
<P><STRONG><a name="[2e9]"></a>drawpixel</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gdisp.o(i.drawpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setglobalwindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>

<P><STRONG><a name="[2e8]"></a>drawpixel_clip</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gdisp.o(i.drawpixel_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drawpixel_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharline
</UL>

<P><STRONG><a name="[2fb]"></a>fillarea</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gdisp.o(i.fillarea))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fillarea
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
</UL>

<P><STRONG><a name="[8f]"></a>fillcharglyph</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gdisp.o(i.fillcharglyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fillcharglyph &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gdisp.o(i.gdispGFillStringBox)
<LI> gdisp.o(i.mf_fillline_callback)
</UL>
<P><STRONG><a name="[8a]"></a>fillcharline</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, gdisp.o(i.fillcharline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fillcharline &rArr; hline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispBlendColor
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp.o(i.fillcharglyph)
</UL>
<P><STRONG><a name="[2e6]"></a>hline_clip</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, gdisp.o(i.hline_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setglobalwindow
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillcharline
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharline
</UL>

<P><STRONG><a name="[2f6]"></a>line_clip</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, gdisp.o(i.line_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = line_clip &rArr; vline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
</UL>

<P><STRONG><a name="[8b]"></a>mf_countline_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gdisp.o(i.mf_countline_callback))
<BR>[Address Reference Count : 2]<UL><LI> gdisp.o(i.gdispGDrawStringBox)
<LI> gdisp.o(i.gdispGFillStringBox)
</UL>
<P><STRONG><a name="[8c]"></a>mf_drawline_callback</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, gdisp.o(i.mf_drawline_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mf_drawline_callback &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp.o(i.gdispGDrawStringBox)
</UL>
<P><STRONG><a name="[8e]"></a>mf_fillline_callback</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, gdisp.o(i.mf_fillline_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mf_fillline_callback &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp.o(i.gdispGFillStringBox)
</UL>
<P><STRONG><a name="[2ea]"></a>setglobalwindow</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gdisp.o(i.setglobalwindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setglobalwindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
</UL>

<P><STRONG><a name="[2f2]"></a>vline_clip</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, gdisp.o(i.vline_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vline_clip &rArr; drawpixel &rArr; setglobalwindow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
</UL>

<P><STRONG><a name="[30a]"></a>matchfont</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gdisp_fonts.o(i.matchfont))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
</UL>

<P><STRONG><a name="[2ff]"></a>getPixels</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, gdisp_image_bmp.o(i.getPixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getPixels &rArr; gfileRead
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileRead
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileGetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageCache_BMP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[34e]"></a>mf_round_to_prev_tab</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mf_justify.o(i.mf_round_to_prev_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
</UL>

<P><STRONG><a name="[348]"></a>mf_round_to_tab</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mf_justify.o(i.mf_round_to_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
</UL>

<P><STRONG><a name="[34a]"></a>render_left</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, mf_justify.o(i.render_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = render_left &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[34b]"></a>render_right</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, mf_justify.o(i.render_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_prev_tab
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rewind
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[349]"></a>strip_spaces</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, mf_justify.o(i.strip_spaces))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = strip_spaces &rArr; mf_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[346]"></a>avg16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mf_kerning.o(i.avg16))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
</UL>

<P><STRONG><a name="[345]"></a>do_kerning</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mf_kerning.o(i.do_kerning))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
</UL>

<P><STRONG><a name="[9d]"></a>fit_leftedge</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, mf_kerning.o(i.fit_leftedge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_leftedge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_kerning.o(i.mf_compute_kerning)
</UL>
<P><STRONG><a name="[9c]"></a>fit_rightedge</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, mf_kerning.o(i.fit_rightedge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_rightedge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_kerning.o(i.mf_compute_kerning)
</UL>
<P><STRONG><a name="[347]"></a>max16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mf_kerning.o(i.max16))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_compute_kerning
</UL>

<P><STRONG><a name="[396]"></a>fillentry_bitcount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mf_rlefont.o(i.fillentry_bitcount))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>

<P><STRONG><a name="[34c]"></a>find_glyph</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mf_rlefont.o(i.find_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_render_character
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_character_width
</UL>

<P><STRONG><a name="[398]"></a>skip_pixels</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mf_rlefont.o(i.skip_pixels))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rle_dictentry
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>

<P><STRONG><a name="[395]"></a>write_bin_codeword</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mf_rlefont.o(i.write_bin_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_bin_codeword &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_pixels
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillentry_bitcount
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>

<P><STRONG><a name="[34d]"></a>write_glyph_codeword</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mf_rlefont.o(i.write_glyph_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_glyph_codeword &rArr; write_ref_dictentry &rArr; write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_dictentry
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_render_character
</UL>

<P><STRONG><a name="[397]"></a>write_pixels</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mf_rlefont.o(i.write_pixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rle_dictentry
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>

<P><STRONG><a name="[39a]"></a>write_ref_codeword</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mf_rlefont.o(i.write_ref_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rle_dictentry
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_dictentry
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_glyph_codeword
</UL>

<P><STRONG><a name="[399]"></a>write_ref_dictentry</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mf_rlefont.o(i.write_ref_dictentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_ref_dictentry &rArr; write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_glyph_codeword
</UL>

<P><STRONG><a name="[39b]"></a>write_rle_dictentry</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, mf_rlefont.o(i.write_rle_dictentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>

<P><STRONG><a name="[9e]"></a>scaled_pixel_callback</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, mf_scaledfont.o(i.scaled_pixel_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scaled_pixel_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mf_scaledfont.o(i.mf_scaled_render_character)
</UL>
<P><STRONG><a name="[2de]"></a>append_char</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mf_wordwrap.o(i.append_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = append_char &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
</UL>

<P><STRONG><a name="[2e1]"></a>append_word</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mf_wordwrap.o(i.append_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = append_word &rArr; get_wordlen &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wordlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
</UL>

<P><STRONG><a name="[2e2]"></a>get_wordlen</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mf_wordwrap.o(i.get_wordlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_wordlen &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wrap_space
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_word
</UL>

<P><STRONG><a name="[30f]"></a>is_wrap_space</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mf_wordwrap.o(i.is_wrap_space))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wordlen
</UL>

<P><STRONG><a name="[394]"></a>sq16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mf_wordwrap.o(i.sq16))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_lines
</UL>

<P><STRONG><a name="[34f]"></a>tune_lines</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, mf_wordwrap.o(i.tune_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tune_lines
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq16
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rewind
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_wordwrap
</UL>

<P><STRONG><a name="[2e3]"></a>deleteAssignments</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gevent.o(i.deleteAssignments))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = deleteAssignments &rArr; doExitEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
</UL>

<P><STRONG><a name="[2e4]"></a>doExitEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gevent.o(i.doExitEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = doExitEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAssignments
</UL>

<P><STRONG><a name="[314]"></a>testopen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gfile.o(i.testopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = testopen
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
</UL>

<P><STRONG><a name="[f1]"></a>ROMClose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfile_fs_rom.o(i.ROMClose))
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ROMEof</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfile_fs_rom.o(i.ROMEof))
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ROMExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gfile_fs_rom.o(i.ROMExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ROMExists &rArr; ROMFindFile
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>ROMFilesize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gfile_fs_rom.o(i.ROMFilesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ROMFilesize &rArr; ROMFindFile
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[26b]"></a>ROMFindFile</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfile_fs_rom.o(i.ROMFindFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ROMFindFile
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMOpen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFilesize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMExists
</UL>

<P><STRONG><a name="[f4]"></a>ROMGetsize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfile_fs_rom.o(i.ROMGetsize))
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>ROMOpen</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gfile_fs_rom.o(i.ROMOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ROMOpen &rArr; ROMFindFile
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>ROMRead</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gfile_fs_rom.o(i.ROMRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>ROMSetpos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gfile_fs_rom.o(i.ROMSetpos))
<BR>[Address Reference Count : 1]<UL><LI> gfile_fs_rom.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>GetMouseReading</STRONG> (Thumb, 1088 bytes, Stack size 32 bytes, ginput_mouse.o(i.GetMouseReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetOrientation
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmousePostInitDriver
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MousePoll
</UL>

<P><STRONG><a name="[86]"></a>MousePoll</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ginput_mouse.o(i.MousePoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MousePoll &rArr; GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetNext
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ginput_mouse.o(i._gmouseInitDriver)
</UL>
<P><STRONG><a name="[212]"></a>SendMouseEvent</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ginput_mouse.o(i.SendMouseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SendMouseEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>

<P><STRONG><a name="[90]"></a>GTimerThreadHandler</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, gtimer.o(i.GTimerThreadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GTimerThreadHandler &rArr; gfxSemWait &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gtimer.o(i.gtimerStart)
</UL>
<P><STRONG><a name="[f9]"></a>ButtonMouseDown</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gwin_button.o(i.ButtonMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ButtonMouseDown &rArr; _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_button.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>ButtonMouseUp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gwin_button.o(i.ButtonMouseUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ButtonMouseUp &rArr; _gwinSendEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_button.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>getButtonColors</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gwin_button.o(i.getButtonColors))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[fc]"></a>CheckboxMouseDown</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gwin_checkbox.o(i.CheckboxMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckboxMouseDown &rArr; SendCheckboxEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_checkbox.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>SendCheckboxEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gwin_checkbox.o(i.SendCheckboxEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendCheckboxEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxCheck
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckboxMouseDown
</UL>

<P><STRONG><a name="[324]"></a>getCheckboxColors</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gwin_checkbox.o(i.getCheckboxColors))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
</UL>

<P><STRONG><a name="[fd]"></a>AfterClear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gwin_console.o(i.AfterClear))
<BR>[Address Reference Count : 1]<UL><LI> gwin_console.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>ESCPrintColor</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gwin_console.o(i.ESCPrintColor))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[32b]"></a>ESCtoAttr</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, gwin_console.o(i.ESCtoAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESCtoAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[100]"></a>ContainerBorderSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gwin_container.o(i.ContainerBorderSize))
<BR>[Address Reference Count : 1]<UL><LI> gwin_container.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ImageDestroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gwin_image.o(i.ImageDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ImageDestroy &rArr; gdispImageClose &rArr; gfileClose
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageIsOpen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_image.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>ImageRedraw</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, gwin_image.o(i.ImageRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ImageRedraw &rArr; gdispGFillArea &rArr; fillarea
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageSetBgColor
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageIsOpen
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetDefaultBgColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_image.o(.constdata)
</UL>
<P><STRONG><a name="[310]"></a>getheight</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gwin_label.o(i.getheight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getheight
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetFontMetric
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[312]"></a>getwidth</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gwin_label.o(i.getwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGLabelCreate
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[328]"></a>gwinLabelDraw</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, gwin_label.o(i.gwinLabelDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gwinLabelDraw &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_compute_kerning &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinResize
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getwidth
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getheight
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDrawJustifiedLeft
</UL>

<P><STRONG><a name="[105]"></a>RadioMouseDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gwin_radio.o(i.RadioMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RadioMouseDown &rArr; gwinRadioPress &rArr; SendRadioEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_radio.o(.constdata)
</UL>
<P><STRONG><a name="[287]"></a>SendRadioEvent</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gwin_radio.o(i.SendRadioEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendRadioEvent &rArr; geventSendEvent &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
</UL>

<P><STRONG><a name="[32d]"></a>getDrawColors</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gwin_radio.o(i.getDrawColors))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
</UL>

<P><STRONG><a name="[87]"></a>gwidgetEvent</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, gwin_widget.o(i.gwidgetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gwidgetEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_widget.o(i._gwidgetInit)
</UL>
<P><STRONG><a name="[88]"></a>RedrawTimerFn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gwin_wm.o(i.RedrawTimerFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RedrawTimerFn &rArr; _gwinFlushRedraws &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(i._gwmInit)
</UL>
<P><STRONG><a name="[108]"></a>WM_Add</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gwin_wm.o(i.WM_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WM_Add &rArr; WM_Size &rArr; WM_Move &rArr;  WM_Size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>WM_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gwin_wm.o(i.WM_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>WM_Delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gwin_wm.o(i.WM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_Delete &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>WM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gwin_wm.o(i.WM_Init))
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>WM_MinMax</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gwin_wm.o(i.WM_MinMax))
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>WM_Move</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, gwin_wm.o(i.WM_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = WM_Move &rArr;  WM_Size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>WM_Raise</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gwin_wm.o(i.WM_Raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_Raise &rArr; _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>WM_Redraw</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, gwin_wm.o(i.WM_Redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM_Redraw &rArr; _gwinUpdate &rArr; gtimerJab &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetDefaultBgColor
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>WM_Size</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, gwin_wm.o(i.WM_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = WM_Size &rArr; WM_Move &rArr;  WM_Size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gwin_wm.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[7e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _freopen_locked &rArr; _fclose_internal &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState &rArr; EvrRtxKernelGetState &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fopen$locked
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[172]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
